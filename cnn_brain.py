# -*- coding: utf-8 -*-
"""Cnn_Brain.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_lkZ2_KhKgcurrHA-jCl4ycYcb08OeRF
"""

!wget https://trello-attachments.s3.amazonaws.com/5d404847c84f418860597cb6/5d738a11fb9cbb3f8a994277/492bd10eedeff91589cc072d584ab06a/Brain.zip

!unzip Brain.zip

!ls

from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

model = Sequential()
model.add(Convolution2D(16,(3,3),input_shape=(64,64,3),activation = 'relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Convolution2D(32,(3,3),input_shape=(64,64,3),activation = 'relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Convolution2D(64,(3,3),input_shape=(64,64,3),activation = 'relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Convolution2D(128,(3,3),input_shape=(64,64,3),activation = 'relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())

model.add(Dense(output_dim=128, activation='relu'))
model.add(Dense(output_dim =1,activation = 'sigmoid'))

model.compile(optimizer='adam',loss = 'binary_crossentropy',metrics = ['accuracy'])

# data augmentation
from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)
training_data = train_datagen.flow_from_directory('/content/Brain/train',target_size=(64,64),batch_size=32,class_mode='binary')
test_data = train_datagen.flow_from_directory('/content/Brain/test',target_size=(64,64),batch_size=32,class_mode='binary')

from IPython.display import display
from PIL import Image
model.fit_generator(training_data,steps_per_epoch=221,epochs=50,validation_data=test_data,validation_steps=5)

model_json = model.to_json()
with open ("./cnnBrain.json","w") as json_file:
  json_file.write(model_json)

#save the weight in a separate file
model.save("./cnnBrain.h5")
print("saved model")

from keras.models import load_model 
classifier = load_model('cnnBrain.h5')

import numpy as np
from keras.models import load_model
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator,array_to_img,img_to_array,load_img
image_to_predict = '/content/Brain/test/no/no 9.png'
test_image =image.load_img(image_to_predict,target_size =(64,64))
test_image =image.img_to_array(test_image)
test_image =np.expand_dims(test_image, axis =0)
result = classifier.predict(test_image)
if result[0][0] >= 0.7:
    prediction = 'tumour'
else:
    prediction = 'non tumor'
print(prediction)

from google.colab import files
files.download('cnnBrain.json')

